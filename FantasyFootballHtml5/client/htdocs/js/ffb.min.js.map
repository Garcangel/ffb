{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/src/js/modules/preloader.ts","client/src/js/modules/soundengine.ts","client/src/js/preloadtest.ts","client/src/js/soundtest.ts","common/util/debug.ts","common/util/util.ts"],"names":[],"mappings":"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","file":"ffb.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Debug, DebugLevel } from \"../../../../common/util/debug\";\n\nexport class Preloader {\n    private images: string[] = [];\n    private loadedCount: number;\n    private progressCallback: (loaded: number, imageCount: number) => void;\n\n    public constructor(progressCallback?: (loaded: number, imageCount: number) => void) {\n        this.loadedCount = 0;\n        if (progressCallback) {\n            this.progressCallback = progressCallback;\n        }\n    }\n\n    public registerImage(imagePath: string, imageFile: string) {\n        this.images.push(imagePath + \"/\" + imageFile);\n    }\n\n    public async preload(parallel: boolean): Promise<void> {\n        this.loadedCount = 0;\n        return new Promise<void>(async (resolve) => {\n            let list: Array<Promise<void>> = [];\n            for (let imagePath of this.images) {\n                if (parallel) {\n                    list.push(this.loadImage(imagePath));\n                } else {\n                    await this.loadImage(imagePath);\n                }\n            }\n            await Promise.all(list);\n\n            resolve();\n        });\n    }\n\n    private loadImage(imagePath: string): Promise<void> {\n        return new Promise<void>((resolve) => {\n            Debug.log(DebugLevel.Debug, \"Loading Image: \" + imagePath);\n            let image = new Image();\n            image.onload = () => {\n                this.loadedCount++;\n                if (this.progressCallback) {\n                    this.progressCallback(this.loadedCount, this.images.length);\n                }\n                Debug.log(DebugLevel.Debug, \"Loaded Image: \" + imagePath);\n                resolve();\n            };\n            image.src = imagePath;\n        });\n    }\n}\n","/* Sound Engine implementation\n *\n * Dependencies: \n *  - Howler.js - Underlying audio library.\n *  - es6-shim - Provides Promises for browsers not yet implementing es6.\n *\n */\n\nimport { Debug, DebugLevel } from \"../../../../common/util/debug\";\nimport { Util } from \"../../../../common/util/util\";\n\nexport interface ISoundOptions {\n    allowOverlap?: boolean;\n    volume?: number;\n}\n\ninterface ISoundState extends ISoundOptions {\n    playing?: number;\n    path?: string;\n    files?: string[];\n    howl?: Howl;\n    loaded?: boolean;\n}\n\nexport class SoundEngine {\n    private progressCallback: (loaded: number, soundCount: number) => void;\n    private soundCount: number;\n    private loadedCount: number;\n    private sounds: { [propName: string]: ISoundState } = { };\n\n    private defaultOptions: ISoundState = {\n        allowOverlap: true,\n        volume: 1.0,\n    };\n\n    public constructor(progressCallback?: (loaded: number, soundCount: number) => void) {\n        Howler.volume(1.0);\n        if (progressCallback) {\n            this.progressCallback = progressCallback;\n        }\n        this.loadedCount = 0;\n        this.soundCount = 0;\n    };\n\n    public registerSound(path: string, sound: string, options: ISoundOptions): void {\n        let state: ISoundState = Util.extend({ }, this.defaultOptions, options);\n        state.path = path;\n        state.playing = 0;\n        state.files = [path + \"/\" + sound + \".webm\", path + \"/\" + sound + \".mp3\"];\n\n        if (this.sounds[sound] === undefined) {\n            this.soundCount++;\n        }\n        this.sounds[sound] = state;\n    }\n\n    public preload(parallel: boolean): Promise<void> {\n        this.loadedCount = 0;\n        return new Promise<void>(async (resolve) => {\n            let list: Array<Promise<void>> = [];\n            for (let sound in this.sounds) {\n                if (parallel) {\n                    list.push(this.loadFile(sound));\n                } else {\n                    await this.loadFile(sound);\n                }\n            }\n            await Promise.all(list);\n\n            resolve();\n        });\n    }\n\n    public async play(sound: string, options?: ISoundOptions) {\n        if (!this.sounds[sound].loaded) {\n            await this.loadFile(sound);\n        }\n\n        let opts: ISoundState = Util.extend({ }, this.defaultOptions, this.sounds[sound], options);\n\n        if (!opts.allowOverlap && opts.playing) {\n            return;\n        }\n\n        let snd = this.sounds[sound].howl;\n\n        if (snd !== undefined) {\n            snd.volume(opts.volume);\n\n            this.sounds[sound].playing++;\n            snd.on(\"end\", () => {\n                this.sounds[sound].playing--;\n            });\n            snd.play();\n        }\n    }\n\n    public globalVolume(volume: number): void {\n        Howler.volume(volume);\n    }\n\n    public stop(): void {\n        Howler.unload();\n        Util.eachIn(this.sounds, (sound) => {\n            this.sounds[sound].howl = undefined;\n            this.sounds[sound].loaded = false;\n        });\n    }\n\n    private loadFile(sound: string): Promise<void> {\n        let opts: ISoundState = Util.extend({ }, this.defaultOptions, this.sounds[sound]);\n        Debug.log(DebugLevel.Debug, \"Loading sound: \" + sound);\n        return new Promise<void>((resolve) => {\n            let file = new Howl({\n                onload: () => {\n                    this.sounds[sound].howl = file;\n                    if (!this.sounds[sound].loaded) {\n                        this.sounds[sound].loaded = true;\n                        this.loadedCount++;\n                        if (this.progressCallback) {\n                            this.progressCallback(this.loadedCount, this.soundCount);\n                        }\n                    }\n                    Debug.log(DebugLevel.Debug, \"Sound loaded: \" + sound);\n                    resolve();\n                },\n                src: opts.files,\n                volume: opts.volume,\n            });\n        });\n    }\n}\n"," // tslint:disable:no-console\nimport { Preloader } from \"./modules/preloader\";\nimport { ISoundOptions, SoundEngine } from \"./modules/soundengine\";\n\n// tslint:disable-next-line:no-string-literal\nwindow[\"preloadTest\"] = () => {\n    let imageProgress = 0;\n    let soundProgress = 0;\n\n    function updateTotalProgress() {\n        let progress = soundProgress * 0.5 + imageProgress * 0.5;\n        $(\"#totalprogress\").width(progress + \"%\");\n    }\n\n    let p: Preloader = new Preloader((loaded, imageCount) => {\n        let progress = 100 * (loaded / imageCount);\n        $(\"#imageprogress\").width(progress + \"%\");\n        imageProgress = progress;\n        updateTotalProgress();\n    });\n\n    p.registerImage(\"media/images/pitches/basic\", \"blizzard.png\");\n    p.registerImage(\"media/images/pitches/basic\", \"heat.png\");\n    p.registerImage(\"media/images/pitches/basic\", \"nice.png\");\n    p.registerImage(\"media/images/pitches/basic\", \"rain.png\");\n    p.registerImage(\"media/images/pitches/basic\", \"sunny.png\");\n\n    $(\"#preloadImagesSerial\").on(\"click\", () => {\n        p.preload(false)\n         .then(() => {\n             console.log(\"Images loaded\");\n         });\n    });\n\n    $(\"#preloadImagesParallel\").on(\"click\", () => {\n         p.preload(true)\n         .then(() => {\n             console.log(\"Images loaded\");\n         });\n    });\n\n    $(\"#preloadAllSerial\").on(\"click\", async () => {\n        await p.preload(false);\n        await se.preload(false);\n    });\n\n    $(\"#preloadAllParallel\").on(\"click\", async () => {\n        p.preload(true);\n        se.preload(true);\n    });\n\n    let sounds: { [propName: string]: ISoundOptions } = {\n        Aaah: { volume: 0.1 },\n        Booing: { volume: 0.1 },\n        Cheering: { volume: 0.1 },\n        ClapBoo: { volume: 0.1 },\n        Clapping: { volume: 0.1 },\n        Crickets: { volume: 0.1 },\n        Giggling: { volume: 0.1 },\n        Hysterical: { volume: 0.1 },\n        Laughter: { volume: 0.1 },\n        Oooh: { volume: 0.1 },\n        Shocked: { volume: 0.1 },\n        Stomping: { volume: 0.1 },\n    };\n\n    let se = new SoundEngine((loaded, soundCount) => {\n        let progress = 100 * (loaded / soundCount);\n        $(\"#soundprogress\").width(progress + \"%\");\n        soundProgress = progress;\n        updateTotalProgress();\n    });\n\n    $.each(sounds, (sound, options) => {\n        se.registerSound(\"media/sounds\", sound, options);\n    });\n\n    $(\".soundbutton\").click((evt) => {\n        se.play($(evt.target).attr(\"file\"));\n    });\n\n    $(\"#globalvolume\").on(\"change\", (evt) => {\n       se.globalVolume($(evt.target).val() / 100);\n    });\n\n    $(\"#stopbutton\").on(\"click\", () => {\n        se.stop();\n    });\n\n    $(\"#preloadSoundsSerial\").on(\"click\", () => {\n        se.preload(false)\n        .then(() => {\n            console.log(\"Sounds loaded.\");\n        });\n    });\n\n    $(\"#preloadSoundsParallel\").on(\"click\", () => {\n        se.preload(true)\n        .then(() => {\n            console.log(\"Sounds loaded.\");\n        });\n    });\n};\n"," // tslint:disable:no-console\nimport { ISoundOptions, SoundEngine } from \"./modules/soundengine\";\n// tslint:disable-next-line:no-string-literal\nwindow[\"soundTest\"] = (progressCallback?: (loaded: number, soundCount: number) => void) => {\n    let sounds: { [propName: string]: ISoundOptions } = {\n        Aaah: { volume: 0.1 },\n        Booing: { volume: 0.1 },\n        Cheering: { volume: 0.1 },\n        ClapBoo: { volume: 0.1 },\n        Clapping: { volume: 0.1 },\n        Crickets: { volume: 0.1 },\n        Giggling: { volume: 0.1 },\n        Hysterical: { volume: 0.1 },\n        Laughter: { volume: 0.1 },\n        Oooh: { volume: 0.1 },\n        Shocked: { volume: 0.1 },\n        Stomping: { volume: 0.1 },\n    };\n\n    if (!progressCallback) {\n        progressCallback = (loaded, soundCount) => {\n            let progress = 100 * (loaded / soundCount);\n            $(\"#soundprogress\").width(progress + \"%\");\n        }\n    }\n\n    let se = new SoundEngine(progressCallback);\n\n    $.each(sounds, (sound, options) => {\n        se.registerSound(\"media/sounds\", sound, options);\n    });\n\n    $(\".soundbutton\").click((evt) => {\n        se.play($(evt.target).attr(\"file\"));\n    });\n\n    $(\"#globalvolume\").on(\"change\", (evt) => {\n       se.globalVolume($(evt.target).val() / 100);\n    });\n\n    $(\"#stopbutton\").on(\"click\", () => {\n        se.stop();\n    });\n\n    $(\"#preloadSoundsSerial\").on(\"click\", () => {\n        se.preload(false)\n        .then(() => {\n            console.log(\"Sounds loaded.\");\n        });\n    });\n\n    $(\"#preloadSoundsParallel\").on(\"click\", () => {\n        se.preload(true)\n        .then(() => {\n            console.log(\"Sounds loaded.\");\n        });\n    });\n}\n","// tslint:disable:no-console\nexport enum DebugLevel {\n    Debug = 1,\n    Info = 2,\n    Warn = 3,\n    Error = 4,\n}\n\nexport class Debug {\n    public static log(level: DebugLevel, message: string) {\n        console.log(DebugLevel[level] + \": \" + message);\n    }\n}\n","export class Util {\n    public static extend(...args) {\n        for (let i = 1; i < args.length; i++) {\n            for (let key in args[i]) {\n                if (args[i].hasOwnProperty(key)) {\n                    args[0][key] = args[i][key];\n                }\n            }\n        }\n        return args[0];\n    }\n\n    public static eachOf<T>(list: T[], func: (T) => void) {\n        for (let item of list) {\n            func(item);\n        }\n    }\n\n    public static eachIn<T>(list: {}, func: (T) => void) {\n        for (let item in list) {\n            if (list.hasOwnProperty(item)) {\n                func(item);\n            }\n        }\n    }\n\n}\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}