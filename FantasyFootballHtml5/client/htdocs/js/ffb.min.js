(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var debug_1 = require("../../../../common/util/debug");
var Preloader = (function () {
    function Preloader(progressCallback) {
        this.images = [];
        this.loadedCount = 0;
        if (progressCallback) {
            this.progressCallback = progressCallback;
        }
    }
    Preloader.prototype.registerImage = function (imagePath, imageFile) {
        this.images.push(imagePath + "/" + imageFile);
    };
    Preloader.prototype.preload = function (parallel) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.loadedCount = 0;
                return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var list, _i, _a, imagePath;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    list = [];
                                    _i = 0, _a = this.images;
                                    _b.label = 1;
                                case 1:
                                    if (!(_i < _a.length))
                                        return [3 /*break*/, 5];
                                    imagePath = _a[_i];
                                    if (!parallel)
                                        return [3 /*break*/, 2];
                                    list.push(this.loadImage(imagePath));
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, this.loadImage(imagePath)];
                                case 3:
                                    _b.sent();
                                    _b.label = 4;
                                case 4:
                                    _i++;
                                    return [3 /*break*/, 1];
                                case 5: return [4 /*yield*/, Promise.all(list)];
                                case 6:
                                    _b.sent();
                                    resolve();
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    Preloader.prototype.loadImage = function (imagePath) {
        var _this = this;
        return new Promise(function (resolve) {
            debug_1.Debug.log(debug_1.DebugLevel.Debug, "Loading Image: " + imagePath);
            var image = new Image();
            image.onload = function () {
                _this.loadedCount++;
                if (_this.progressCallback) {
                    _this.progressCallback(_this.loadedCount, _this.images.length);
                }
                debug_1.Debug.log(debug_1.DebugLevel.Debug, "Loaded Image: " + imagePath);
                resolve();
            };
            image.src = imagePath;
        });
    };
    return Preloader;
}());
exports.Preloader = Preloader;
},{"../../../../common/util/debug":5}],2:[function(require,module,exports){
/* Sound Engine implementation
 *
 * Dependencies:
 *  - Howler.js - Underlying audio library.
 *  - es6-shim - Provides Promises for browsers not yet implementing es6.
 *
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var debug_1 = require("../../../../common/util/debug");
var util_1 = require("../../../../common/util/util");
var SoundEngine = (function () {
    function SoundEngine(progressCallback) {
        this.sounds = {};
        this.defaultOptions = {
            allowOverlap: true,
            volume: 1.0,
        };
        Howler.volume(1.0);
        if (progressCallback) {
            this.progressCallback = progressCallback;
        }
        this.loadedCount = 0;
        this.soundCount = 0;
    }
    ;
    SoundEngine.prototype.registerSound = function (path, sound, options) {
        var state = util_1.Util.extend({}, this.defaultOptions, options);
        state.path = path;
        state.playing = 0;
        state.files = [path + "/" + sound + ".webm", path + "/" + sound + ".mp3"];
        if (this.sounds[sound] === undefined) {
            this.soundCount++;
        }
        this.sounds[sound] = state;
    };
    SoundEngine.prototype.preload = function (parallel) {
        var _this = this;
        this.loadedCount = 0;
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var list, _a, _b, _i, sound;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        list = [];
                        _a = [];
                        for (_b in this.sounds)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length))
                            return [3 /*break*/, 5];
                        sound = _a[_i];
                        if (!parallel)
                            return [3 /*break*/, 2];
                        list.push(this.loadFile(sound));
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.loadFile(sound)];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [4 /*yield*/, Promise.all(list)];
                    case 6:
                        _c.sent();
                        resolve();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    SoundEngine.prototype.play = function (sound, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var opts, snd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.sounds[sound].loaded)
                            return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadFile(sound)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        opts = util_1.Util.extend({}, this.defaultOptions, this.sounds[sound], options);
                        if (!opts.allowOverlap && opts.playing) {
                            return [2 /*return*/];
                        }
                        snd = this.sounds[sound].howl;
                        if (snd !== undefined) {
                            snd.volume(opts.volume);
                            this.sounds[sound].playing++;
                            snd.on("end", function () {
                                _this.sounds[sound].playing--;
                            });
                            snd.play();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SoundEngine.prototype.globalVolume = function (volume) {
        Howler.volume(volume);
    };
    SoundEngine.prototype.stop = function () {
        var _this = this;
        Howler.unload();
        util_1.Util.eachIn(this.sounds, function (sound) {
            _this.sounds[sound].howl = undefined;
            _this.sounds[sound].loaded = false;
        });
    };
    SoundEngine.prototype.loadFile = function (sound) {
        var _this = this;
        var opts = util_1.Util.extend({}, this.defaultOptions, this.sounds[sound]);
        debug_1.Debug.log(debug_1.DebugLevel.Debug, "Loading sound: " + sound);
        return new Promise(function (resolve) {
            var file = new Howl({
                onload: function () {
                    _this.sounds[sound].howl = file;
                    if (!_this.sounds[sound].loaded) {
                        _this.sounds[sound].loaded = true;
                        _this.loadedCount++;
                        if (_this.progressCallback) {
                            _this.progressCallback(_this.loadedCount, _this.soundCount);
                        }
                    }
                    debug_1.Debug.log(debug_1.DebugLevel.Debug, "Sound loaded: " + sound);
                    resolve();
                },
                src: opts.files,
                volume: opts.volume,
            });
        });
    };
    return SoundEngine;
}());
exports.SoundEngine = SoundEngine;
},{"../../../../common/util/debug":5,"../../../../common/util/util":6}],3:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
// tslint:disable:no-console
var preloader_1 = require("./modules/preloader");
var soundengine_1 = require("./modules/soundengine");
// tslint:disable-next-line:no-string-literal
window["preloadTest"] = function () {
    var imageProgress = 0;
    var soundProgress = 0;
    function updateTotalProgress() {
        var progress = soundProgress * 0.5 + imageProgress * 0.5;
        $("#totalprogress").width(progress + "%");
    }
    var p = new preloader_1.Preloader(function (loaded, imageCount) {
        var progress = 100 * (loaded / imageCount);
        $("#imageprogress").width(progress + "%");
        imageProgress = progress;
        updateTotalProgress();
    });
    p.registerImage("media/images/pitches/basic", "blizzard.png");
    p.registerImage("media/images/pitches/basic", "heat.png");
    p.registerImage("media/images/pitches/basic", "nice.png");
    p.registerImage("media/images/pitches/basic", "rain.png");
    p.registerImage("media/images/pitches/basic", "sunny.png");
    $("#preloadImagesSerial").on("click", function () {
        p.preload(false)
            .then(function () {
            console.log("Images loaded");
        });
    });
    $("#preloadImagesParallel").on("click", function () {
        p.preload(true)
            .then(function () {
            console.log("Images loaded");
        });
    });
    $("#preloadAllSerial").on("click", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, p.preload(false)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, se.preload(false)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    $("#preloadAllParallel").on("click", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            p.preload(true);
            se.preload(true);
            return [2 /*return*/];
        });
    }); });
    var sounds = {
        Aaah: { volume: 0.1 },
        Booing: { volume: 0.1 },
        Cheering: { volume: 0.1 },
        ClapBoo: { volume: 0.1 },
        Clapping: { volume: 0.1 },
        Crickets: { volume: 0.1 },
        Giggling: { volume: 0.1 },
        Hysterical: { volume: 0.1 },
        Laughter: { volume: 0.1 },
        Oooh: { volume: 0.1 },
        Shocked: { volume: 0.1 },
        Stomping: { volume: 0.1 },
    };
    var se = new soundengine_1.SoundEngine(function (loaded, soundCount) {
        var progress = 100 * (loaded / soundCount);
        $("#soundprogress").width(progress + "%");
        soundProgress = progress;
        updateTotalProgress();
    });
    $.each(sounds, function (sound, options) {
        se.registerSound("media/sounds", sound, options);
    });
    $(".soundbutton").click(function (evt) {
        se.play($(evt.target).attr("file"));
    });
    $("#globalvolume").on("change", function (evt) {
        se.globalVolume($(evt.target).val() / 100);
    });
    $("#stopbutton").on("click", function () {
        se.stop();
    });
    $("#preloadSoundsSerial").on("click", function () {
        se.preload(false)
            .then(function () {
            console.log("Sounds loaded.");
        });
    });
    $("#preloadSoundsParallel").on("click", function () {
        se.preload(true)
            .then(function () {
            console.log("Sounds loaded.");
        });
    });
};
},{"./modules/preloader":1,"./modules/soundengine":2}],4:[function(require,module,exports){
"use strict";
// tslint:disable:no-console
var soundengine_1 = require("./modules/soundengine");
// tslint:disable-next-line:no-string-literal
window["soundTest"] = function (progressCallback) {
    var sounds = {
        Aaah: { volume: 0.1 },
        Booing: { volume: 0.1 },
        Cheering: { volume: 0.1 },
        ClapBoo: { volume: 0.1 },
        Clapping: { volume: 0.1 },
        Crickets: { volume: 0.1 },
        Giggling: { volume: 0.1 },
        Hysterical: { volume: 0.1 },
        Laughter: { volume: 0.1 },
        Oooh: { volume: 0.1 },
        Shocked: { volume: 0.1 },
        Stomping: { volume: 0.1 },
    };
    if (!progressCallback) {
        progressCallback = function (loaded, soundCount) {
            var progress = 100 * (loaded / soundCount);
            $("#soundprogress").width(progress + "%");
        };
    }
    var se = new soundengine_1.SoundEngine(progressCallback);
    $.each(sounds, function (sound, options) {
        se.registerSound("media/sounds", sound, options);
    });
    $(".soundbutton").click(function (evt) {
        se.play($(evt.target).attr("file"));
    });
    $("#globalvolume").on("change", function (evt) {
        se.globalVolume($(evt.target).val() / 100);
    });
    $("#stopbutton").on("click", function () {
        se.stop();
    });
    $("#preloadSoundsSerial").on("click", function () {
        se.preload(false)
            .then(function () {
            console.log("Sounds loaded.");
        });
    });
    $("#preloadSoundsParallel").on("click", function () {
        se.preload(true)
            .then(function () {
            console.log("Sounds loaded.");
        });
    });
};
},{"./modules/soundengine":2}],5:[function(require,module,exports){
"use strict";
// tslint:disable:no-console
var DebugLevel;
(function (DebugLevel) {
    DebugLevel[DebugLevel["Debug"] = 1] = "Debug";
    DebugLevel[DebugLevel["Info"] = 2] = "Info";
    DebugLevel[DebugLevel["Warn"] = 3] = "Warn";
    DebugLevel[DebugLevel["Error"] = 4] = "Error";
})(DebugLevel = exports.DebugLevel || (exports.DebugLevel = {}));
var Debug = (function () {
    function Debug() {
    }
    Debug.log = function (level, message) {
        console.log(DebugLevel[level] + ": " + message);
    };
    return Debug;
}());
exports.Debug = Debug;
},{}],6:[function(require,module,exports){
"use strict";
var Util = (function () {
    function Util() {
    }
    Util.extend = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        for (var i = 1; i < args.length; i++) {
            for (var key in args[i]) {
                if (args[i].hasOwnProperty(key)) {
                    args[0][key] = args[i][key];
                }
            }
        }
        return args[0];
    };
    Util.eachOf = function (list, func) {
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            func(item);
        }
    };
    Util.eachIn = function (list, func) {
        for (var item in list) {
            if (list.hasOwnProperty(item)) {
                func(item);
            }
        }
    };
    return Util;
}());
exports.Util = Util;
},{}]},{},[4,3])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,